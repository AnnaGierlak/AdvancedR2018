devtools::build('~/R/hugo')
install.packages("/home/ja/R/hugo_0.1.tar.gz", repos = NULL, type="source")
install.packages("/home/ja/R/hugo_0.1.tar.gz", repos = NULL, type="source")
install.packages("/home/mk/R/hugo_0.1.tar.gz", repos = NULL, type="source")
install.packages(‘openxlsx’)
install.packages('openxlsx')
install.packages('mlbench')
('ReporteRs')
install.packages('ReporteRs')
install.packages("/home/mk/R/hugo_0.1.tar.gz", repos = NULL, type="source")
library(hugo)
hugo_start_investigation('Maciek_i_Ja')
?hugo_read_data
hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
View(data)
View(dane)
hugo_clean_data()
?hugo_clean_data()
sum(is.ina(dane))
sum(is.na(dane))
hugo_clean_data(dane)
options(stringsAsFactors=F)
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
hugo_clean_data(dane)
options(stringsAsFactors=T)
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
hugo_clean_data(dane)
View(dane)
View(dane)
dane$district = factor(dane$district)
hugo_clean_data(dane)
dane <- hugo_clean_data(dane)
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
dane$district = factor(dane$district)
dane_1 <- hugo_clean_data(dane)
all.equal(dane,dane_1)
dane == dane_1
sum(dane == dane_1)
dane[1,]
dane_1[1,]
hist(dane$m2.price)
hist(dane_$m2.price)
hist(dane_1$m2.price)
sum(dane[,1] == dane_1[,1])
hugo_summarise_data(dane)
?hugo_train_model
hugo_train_model(dane,m2.price~.)
dane[,-1] <- factor(dane[,-1])
apply(dane[,-1],2,factor)
apply(dane[,c(4,5,6)],2,factor)
dane[,c(4,5,6)] <- apply(dane[,c(4,5,6)],2,factor)
rpart::rpart(m2.price~,data = dane, minsplit = 10)
rpart::rpart(m2.price~,data = dane, minsplit = 5)
rpart::rpart(m2.price~.,data = dane, minsplit = 5)
model_las <- rpart::rpart(m2.price~.,data = dane, minsplit = 5)
summary(model_las)
model_las <- caret::caret(m2.price~.,data = dane, minsplit = 5)
w <- sample(1:nrow(dane),0.7 *nrow(dane))
train <- dane[w,]
test <- dane[-w,]
model_las <- randomForest::randomForest(m2.price~.,data = train, ntree = 200)
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
dane[,c(4,5,6)] <- apply(dane[,c(4,5,6)],2,factor)
hugo_summarise_data(dane)
is.factor(dane[1,])
is.factor(dane[,1])
w <- sample(1:nrow(dane),0.7 *nrow(dane))
w
train <- dane[w,]
test <- dane[-w,]
model_las <- randomForest::randomForest(m2.price~.,data = train, ntree = 200)
dane[,c(4,5,6)] <- apply(dane[,c(4,5,6)],2,as.factor)
hugo_summarise_data(dane)
is.factor(dane[,4])
?apply
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
dane[,4] <- as.factor(dane[,4])
is.factor(dane[,4])
dane[,5] <- as.factor(dane[,5])
dane[,6] <- as.factor(dane[,6])
hugo_summarise_data(dane)
w <- sample(1:nrow(dane),0.7 *nrow(dane))
train <- dane[w,]
test <- dane[-w,]
model_las <- randomForest::randomForest(m2.price~.,data = train, ntree = 200)
summary(model_las)
pred <- predict(model_las,test[,-1])
pred
length(pred)
MSE <- mean((train[,1] - pred)^2)
MSE <- mean((test[,1] - pred)^2)
MSE
pred
pred[:3]
pred[1:3]
test[1:3,1]
test[1:10,1]
pred[1:10]
names(train)
plot(pred)
plot(pred,test[,1])
abline(1,0)
abline(0,1)
plot(pred,test[,1],pch = 16, col = 'b')
plot(pred,test[,1],pch = 16, col = 'blue')
abline(0,1)
abline(0,1,col = 'red')
?abline
abline(0,1,col = 'red',lwd = 4)
hugo_memorise_model(model_las)
?hugo_memorise_plot()
hugo_memorise_plot({plot(pred,test[,1],pch = 16, col = 'blue')
abline(0,1,col = 'red',lwd = 4)})
devtools::build('~/R/hugo')
install.packages("/home/mk/R/hugo_0.1.tar.gz", repos = NULL, type="source")
library(hugo)
hugo_continue_investigation()
hugo_continue_investigation('Maciek_i_Ja')
hugo_start_investigation('Maciek_i_Ja')
dane <- hugo_read_data('~/R/AdvancedR2018/Projekt2/apartments.xlsx')
dane[,4] <- as.factor(dane[,4])
dane[,5] <- as.factor(dane[,5])
dane[,6] <- as.factor(dane[,6])
hugo_summarise_data(dane)
w <- sample(1:nrow(dane),0.7 *nrow(dane))
train <- dane[w,]
test <- dane[-w,]
model_las <- randomForest::randomForest(m2.price~.,data = train, ntree = 200)
pred <- predict(model_las,test[,-1])
MSE <- mean((test[,1] - pred)^2)
hugo_memorise_plot({plot(pred,test[,1],pch = 16, col = 'blue')
abline(0,1,col = 'red',lwd = 4)})
hugo_memorise_model(model_las)
hugo_memorise(MSE)
plot(test[,1] - pred,col = 'blue', pch = 16)
abline(0,0)
abline(0,0,col = 'red',lwd = 4)
plot(test[,1] - pred,col = 'blue', pch = 16,ylab = 'y - y_pred')
abline(0,0,col = 'red',lwd = 4)
hugo_memorise_plot({plot(test[,1] - pred,col = 'blue', pch = 16,ylab = 'y - y_pred')
abline(0,0,col = 'red',lwd = 4)})
?hugo_memorise_plot
plot(pred,test[,1],pch = 16, col = 'blue')
abline(0,1,col = 'red',lwd = 4)
hugo_memorise_plot({plot(pred,test[,1],pch = 16, col = 'blue',ylab = 'y',xlab = 'y_pred')
abline(0,1,col = 'red',lwd = 4)},name = 'przwidywane vs realne ceny')
plot(test[,1] - pred,col = 'blue', pch = 16,ylab = 'y - y_pred')
abline(0,0,col = 'red',lwd = 4)
hugo_memorise_plot({plot(test[,1] - pred,col = 'blue', pch = 16,ylab = 'y - y_pred')
abline(0,0,col = 'red',lwd = 4)},name ' wykres reszt')
hugo_memorise_plot({plot(test[,1] - pred,col = 'blue', pch = 16,ylab = 'y - y_pred')
abline(0,0,col = 'red',lwd = 4)},name=' wykres reszt')
hugo_memorise_model(model_las)
hugo_memorise(MSE)
hugo_show_history()
hugo_memorise(hugo_show_history())
hugo_show_history()
savehistory()
readLines(".Rhistory")
hist<-readLines(".Rhistory")
hist<-hist[-159]
hist
hugo_show_history()
.hugoEnv$history
hugo_show_history()
savehistory()
options(hugo.connection_out = f)
f = file()
options(hugo.connection_out = f)
hugo_show_history()
f
f.close()
close(f)
getOption('hugo.connection_out')
options(hugo.connection_out = stdout())
hugo_show_statistics()
hugo_show_history()
savehistory("historia rozszerzona")
