ggsave("plots/git_fun_signs.pdf")
############################
# ile skryptów R
df <- db_git %>%
select(user_name, repo_name, file_name) %>%
distinct()
nrow(df)
microbenchmark(
stringi = stri_count("shinjufkls",fixed = "s"),
aut = countCharOccurrences("s", "shinjufkls"))
df <- db_git %>%
select(user_name, repo_name, file_name, v_names) %>%
distinct() %>%
na.omit()
load("DBB_GIT")
df <- db_git %>%
select(user_name, repo_name, file_name, v_names) %>%
distinct() %>%
na.omit()
df2 <- df %>%
group_by(v_names) %>%
summarise(n=n()) %>%
arrange(desc(n)) %>%
filter(n>=50) %>%
top_n(20)
df2$v_names <- factor(df2$v_names, levels=df2$v_names[order(df2$n)])
ggplot(df2, aes(x=v_names, y=n)) +
geom_bar(stat="identity") +
coord_flip() +
ggtitle("Najczestsze nazwy zmiennych - GIT")
ggsave("plots/git_varname.pdf")
countCharOccurrences <- function(char, s) {
chr.pos <- which(unlist(strsplit(s,NULL)) == char)
chr.count <- length(chr.pos)
return(chr.count)
}
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
}
}, times = 100 )
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
}
}, times = 10)
numeric(0)
i=1
n1 <- countCharOccurrences(".", df$v_names[i])
n1
for(i in 1:dlugosc){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
}
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
for(i in 1:dlugosc){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
}
}, times = 10)
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
for(i in 1:dlugosc){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1[i] <- n1
w2[i] <- n2
}
}, times = 10)
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
for(i in 1:dlugosc){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1[i] <- n1
w2[i] <- n2
}
}, times = 1)
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
sapply(1:dlugosc, function(i) {
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1[i] <- n1
w2[i] <- n2
})
}, times = 10)
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
for(i in 1:dlugosc){
n1 <- stri_count_fixed( df$v_names[i], ".")
n2 <- stri_count_fixed(df$v_names[i],"_")
w1[i] <- n1
w2[i] <- n2
}
}, times = 1)
microbenchmark(
original = {
w1 <- w2 <- numeric(0)
for(i in 1:nrow(df)){
n1 <- countCharOccurrences(".", df$v_names[i])
n2 <- countCharOccurrences("_", df$v_names[i])
w1 <- c(w1,n1)
w2 <- c(w2,n2)
} },
new = {
dlugosc <- nrow(df)
w1 <- w2 <- vector(length = dlugosc)
for(i in 1:dlugosc){
n1 <- stri_count_fixed(df$v_names[i], ".")
n2 <- stri_count_fixed(df$v_names[i],"_")
w1[i] <- n1
w2[i] <- n2
}
}, times = 10)
length(df$v_names)
load("H:/Windows7/Desktop/RdlaZaawansowanych/presiData.rda")
View(presiData)
presiData$stateOfBirth[4]
presiData[1,]
install.packages("dataMaid")
library(dataMaid)
makeDataReport(presiData)
install.packages("MST")
library(MST)
data("Teeth", package = "MST")
head(Teeth)
molar <- subset(Teeth, molar == 1)
molar <- molar[molar$id %in% 1:300,]
nPatients <- length(unique(molar$id))
set.seed(482046)
id.train <- sample(x = unique(molar$id), size = floor(nPatients * 2/3),
replace = FALSE)
molar_training <- molar[molar$id %in% id.train, ]
molar_test <- molar[!(molar$id %in% id.train), ]
molar_test <- molar[!(molar$id %in% id.train), ]
form <- as.formula(paste0("Surv(time, event) ~ ",
paste0("x", 1:51, collapse = " + "), " | id"))
fit_molar <- MST(form, data = molar_training, test = molar_test,
method = "marginal", selection.method = "test.sample",
distinct = FALSE, delta = 0.05, nCutPoints = 10, minevents = 5,
minbucket = 20)
fit_molar$tree0
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
fit_molar$tree0
plot(fit_molar$tree0)
fit_molar$pruning.info
fit_molar$best.tree.size
fit_molar$best.tree.structure
plot(getTree(fit_molar, "0"))   #czyli drzewo początkowe
plot(getTree(fit_molar, "2"))
plot(getTree(fit_molar, "3"))
plot(getTree(fit_molar, "4"))
plot(getTree(fit_molar, "log_n"))   #sam korzeń
plot(getTree(fit_molar, "4"))
plot(getTree(fit_molar, "log_n"))   #sam korzeń
tree_final <- getTree(fit_molar, "2")
molar$term_nodes <- as.factor(predict(tree_final, newdata = molar, type = 'node'))
new_model <- coxph(Surv(time, event) ~ term_nodes + cluster(id), data = molar)
new_model
install.packages("gdistance")
r <- raster(ncol = 3, nrow = 3)
library("gdistance")
set.seed(123)
r <- raster(ncol = 3, nrow = 3)
r
r[]
r
r[] <- 1:ncell(r)
r
r <- raster(ncol = 3, nrow = 3)
r[] <- 1:ncell(r)
r
plot(r)
text(r)
tr1 <- transition(r, transitionFunction = mean, directions = 8)
tr1
r[] <- runif(9)
ncf <- function(x) max(x) - x[1] + x[2]
tr2 <- transition(r, ncf, 4, symm = FALSE)
tr2
tr3 <- tr1 * tr2
tr3 <- tr1 + tr2
tr3 <- tr1 * 3
tr3 <- sqrt(tr1)
tr3[cbind(1:9, 1:9)] <- tr2[cbind(1:9, 1:9)]
tr3[1:9, 1:9] <- tr2[1:9, 1:9]
tr3[1:5, 1:5]
image(transitionMatrix(tr1))
plot(raster(tr3), main = "raster(tr3)", xlab = "Longitude (degrees)",
ylab = "Latitude (degrees)")
image(transitionMatrix(tr1))
tr2C <- geoCorrection(tr2, type = "c")
tr3C <- geoCorrection(tr3, type = "c", multpl = FALSE, scl = TRUE)
CorrMatrix <- geoCorrection(tr3, type = "r", multpl = TRUE, scl = TRUE)
tr3R <- tr3 * CorrMatrix
sP <- cbind(c(-100, -100, 100), c(50, -50, 50))
costDistance(tr3C, sP)
commuteDistance(tr3R, sP)
rSPDistance(tr3R, sP, sP, theta = 1e-12, totalNet = "total")
sP <- cbind(c(-100, -100, 100), c(50, -50, 50))
costDistance(tr3C, sP)
commuteDistance(tr3R, sP)
rSPDistance(tr3R, sP, sP, theta = 1e-12, totalNet = "total")
origin <- SpatialPoints(cbind(0, 0))
rSPraster <- passage(tr3C, origin, sP[1,], theta = 3)
plot(rSPraster)
r1 <- passage(tr3C, origin, sP[1,], theta = 1)
r2 <- passage(tr3C, origin, sP[2,], theta = 1)
rJoint <- min(r1, r2)
rDiv <- max(max(r1, r2) * (1 - min(r1, r2)) - min(r1, r2), 0)
plot(rJoint)
text(-100, 50, labels="sp1")
text(-100, -50, labels="sp2")
text(10, 0, labels="O")
r <- raster(system.file("external/maungawhau.grd", package = "gdistance"))
altDiff <- function(x) x[2] - x[1]
hd <- transition(r, altDiff, 8, symm= FALSE)
slope <- geoCorrection(hd)
adj <- adjacent(r, cells = 1:ncell(r), pairs = TRUE, directions = 8)
speed <- slope
speed[adj] <- 6 * exp(-3.5 * abs(slope[adj] + 0.05)) #wzór na prędkośc jest dany explicite
Conductance <- geoCorrection(speed)
A <- c(2667670, 6479000)
B <- c(2667800, 6479400)
AtoB <- shortestPath(Conductance, A, B, output = "SpatialLines")
BtoA <- shortestPath(Conductance, B, A, output = "SpatialLines")
plot(r, xlab = "x coordinate (m)", ylab = "y coordinate (m)",
legend.lab = "Altitude (masl)")
lines(AtoB, col = "red", lwd = 2)
lines(BtoA, col = "blue")
text(A[1] - 10, A[2] - 10, "A")
text(B[1] + 10, B[2] + 10, "B")
install.packages("MissingDataGUI")
library(MissingDataGUI)
MissingDataGUI(tao)
tao
MissingDataGUI(tao)
install.packages("epinet")
library("epinet")
set.seed(1)
N <- 50
mycov <- data.frame(id = 1:N, xpos = runif(N), ypos = runif(N))
dyadCov <- BuildX(mycov, binaryCol = list(c(2, 3)), binaryFunc = "euclidean")
eta <- c(0, -7) # jak kolejne wspolczynniki wplywaja na prawdopodobienstwo istnienia polaczenia
net <- SimulateDyadicLinearERGM(N = N,
dyadiccovmat = dyadCov,
eta = eta)
epi <- SEIR.simulator(M = net,
N = N,
beta = 1,
ki = 3,
thetai = 7,
ke = 3,
latencydist = "gamma")
epi
plot(epi, e.col = "slategrey", i.col = "red")
mcmcinput <- MCMCcontrol(nsamp = 1000000, thinning = 100, etapropsd = c(1, 1))
priors <- priorcontrol(bprior = c(0, 4), tiprior = c(1, 15), teprior = c(1, 15), etaprior = c(0, 10, 0, 10), kiprior = c(1, 7), keprior = c(1, 7), priordists = "uniform")
out <- epinet(~ xpos.ypos.L2Dist, epidata = epi, dyadiccovmat = dyadCov, mcmcinput = mcmcinput, priors = priors)
hist(out$eta[, 1], main = "", xlab = "eta1")
abline(v = sort(out$eta[, 1])[length(out$eta[, 1]) * 0.025], col = "red")
abline(v = sort(out$eta[, 1])[length(out$eta[, 1]) * 0.975], col = "red")
install_github("hugo4r/hugo")
library("devtools")
install_github("hugo4r/hugo")
library(hugo)
hugo_start_investigation(path = "h:/Windows7/Desktop/hugo test")
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
dane <- hugo_clean_data(dane)
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
library(hugo)
setwd("h:/Windows7/Desktop/hugo test")
hugo_start_investigation()
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
setwd("h:/Windows7/Desktop/hugo test")
hugo_start_investigation()
# library(RCurl)
# dane <-read.csv(text=getURL("https://raw.githubusercontent.com/pbiecek/AdvancedR2018/master/Projekt2/HR_data.csv"),
#                  header=T, sep = "\t")
# write.csv(dane, "h:/Windows7/Desktop/hugo test/HR_data.csv")
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
library(hugo)
setwd("h:/Windows7/Desktop/hugo test")
hugo_start_investigation()
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
?hugo_train_model
model <- hugo_train_model(dane, as.formula("left~."))
model <- hugo_train_model(dane[1:100,], as.formula("left~."))
sum(dane[1:100,]$left)
sum(as.numeric(dane[1:100,]$left))
sum(as.numeric(dane[1:150,]$left))
sum(as.numeric(dane[1:500,]$left))
dane$left
which(dane$left==1)
which(dane$left==2)
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
which(dane$left==2)
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
which(dane$left==2)
which(dane$left==1)
which(dane$left==0)
model <- hugo_train_model(dane[c(1:50,2000:2050),], as.formula("left~."))
warnings()
model
model <- hugo_train_model(dane[c(1:500,2001:2500),], as.formula("left~."))
modekl
model
str(model)
model$pred
model$levels
summary(model)
predict(model)
model
hugo_memorise_model(model)
model$results
predykcja <- predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")])
predykcja
predykcja <- predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")])
sum(abs(dane[c(501:550, 2501:2550), "left"] - predykcja))/100
predykcja
sum(abs(dane[c(501:550, 2501:2550), "left"] - as.numeric(predykcja)))/100
sum(abs(as.numeric(dane[c(501:550, 2501:2550), "left"]) - as.numeric(predykcja)))/100
blad_pred <- sum(abs(as.numeric(dane[c(501:550, 2501:2550), "left"]) - as.numeric(predykcja)))/100
model$results
deviance(model)
predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")], type="probs")
predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")], type="prob")
predykcja_pstwa <- predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")], type="prob")
as.numeric(dane[c(501:550, 2501:2550), "left"]) - predykcja_pstwa[,2]
as.numeric(dane[c(501:550, 2501:2550), "left"])
as.numeric(dane[c(501:550, 2501:2550), "left"]) - 1 - predykcja_pstwa[,2]
reszty_pstwa <- as.numeric(dane[c(501:550, 2501:2550), "left"]) - 1 - predykcja_pstwa[,2]
dane_test <- dane[c(501:550, 2501:2550), "left"]
dane_test <- dane[c(501:550, 2501:2550),]
blad_pred <- sum(abs(as.numeric(dane_test[, "left"]) - as.numeric(predykcja)))/100
predykcja_pstwa <- predict(model, dane_test[, -which(colnames(dane) %in% "left")], type="prob")
reszty_pstwa <- as.numeric(dane_test[, "left"]) - 1 - predykcja_pstwa[,2]
plot(1:length(reszty_pstwa), reszty_pstwa, col=dane_test[,"left"])
wykres <- plot(1:length(reszty_pstwa), reszty_pstwa, col=dane_test[,"left"])
wykres
hugo_memorise_plot(wykres)
hugo_show_history()
historia <- hugo_show_history()
historia
hugo_save_investigation()
hugo_memorise(model$results)
savehistory()
h
hugo_show_history
library(hugo)
setwd("h:/Windows7/Desktop/hugo test")
hugo_start_investigation()
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
library(hugo)
setwd("h:/Windows7/Desktop/hugo test")
hugo_start_investigation()
dane <- hugo_read_data(path = "h:/Windows7/Desktop/hugo test/HR_data.csv")[,-1]
head(dane)
dane$sales <- as.factor(dane$sales)
dane$salary <- as.factor(dane$salary)
dane$left <- as.factor(dane$left)
dane <- as.data.frame(dane)
hugo_summarise_data(dane)
hugo_summarise_data(dane)
dane <- hugo_clean_data(dane)
model <- hugo_train_model(dane[c(1:500,2001:2500),], as.formula("left~."))
hugo_memorise_model(model)
predykcja <- predict(model, dane[c(501:550, 2501:2550), -which(colnames(dane) %in% "left")])
model$results
hugo_memorise(model$results)
dane_test <- dane[c(501:550, 2501:2550),]
blad_pred <- sum(abs(as.numeric(dane_test[, "left"]) - as.numeric(predykcja)))/100
predykcja_pstwa <- predict(model, dane_test[, -which(colnames(dane) %in% "left")], type="prob")
reszty_pstwa <- as.numeric(dane_test[, "left"]) - 1 - predykcja_pstwa[,2]
wykres <- plot(1:length(reszty_pstwa), reszty_pstwa, col=dane_test[,"left"])
hugo_memorise_plot(wykres)
hugo_show_history() # 8
hugo_save_investigation() # 9
savehistory()
hugo_share_object(model)
install.packages("getPass")
hugo_share_object(model)
hugo_share_object(model)
hugo_share_object(model)
savehistory()
